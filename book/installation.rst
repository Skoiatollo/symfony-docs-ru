.. index::
   single: Установка

Установка и настройка Symfony2
==================================

Цель этой главы помочь вам настроить и запустить рабочее приложение, созданное
при помощи Symfony. К счастью, Symfony предлагает "дистрибутивы", которые
представляют собой базовые "пусковые" проекты, которые вы можете загрузить и незамедлительно
начать разработку.

.. tip::

    Если вы ищите руководство по созданию нового проекта и размещению
    его в системе контроля версий, перейдите к секции `Использование системы контроля версий`_.

Загрузка дистрибутива Symfony2
-----------------------------------

.. tip::

    Прежде всего, удостоверьтесь, что у вас установлен и настроен Web-сервер
    (например, Apache) и интерпретатор PHP. Более подробную
    информацию о системных требованиях Symfony2 в можете найти в разделе
    :doc:`Системные требования</reference/requirements>`.

Дистрибутивы Symfony2 представляют собой полнофункциональные приложения,
включающие ядро Symfony2, набор полезных пакетов (Bundles), разумную структуру
директорий и конфигурацию по умолчанию. Когда вы загружаете дистрибутив Symfony2,
вы фактически загружаете функциональный скелет приложения, который тут же
можно начать использовать как базу для вашего собственного приложения.

Начнём со страницы загрузки Symfony2 `http://symfony.com/download`_.
На этой странице находится дистрибутив *Symfony Standard Edition*,
который и является основным дистрибутивом. Теперь вам нужно выбрать между 2 решениями:

Вариант 1) Composer
~~~~~~~~~~~~~~~~~~

`Composer`_ является бибилиотекой по управлению зависимостями для PHP, и ее можно использовать 
для загрузки Symfony2 Standard Edition.

Начните с `downloading Composer`_ на ваш локальный компьютер. Если у вас установлен curl,
то это довольно просто:

.. code-block:: bash

    curl -s https://getcomposer.org/installer | php

.. note::

    Если ваш компьютер не готов к использованию Composer, то при запуске этой команды 
    появятся рекоменддации по сообразной настройке  Composer.
    

Composer - это выполняемый файл PHAR, который вы можете использовать для загрузки 
стандартного дистрибутива (Standard Distribution):

.. code-block:: bash

    $ php composer.phar create-project symfony/framework-standard-edition /path/to/webroot/Symfony 2.3.*

.. tip::

    Чтобы файлы от поставщика (vendor files) грузились быстрее, добавьте опцию ``--prefer-dist`` 
    в конец любой option команды Composer.

Выполнение этой команды может занять несколько минут, пока Composer загрузит Стандартный Дистрибутив 
(Standard Distribution) вместе со всеми необходимыми специализированными библиотеками производителя 
(vendor libraries). По завершению у вас будет директория, выглядящая примерно так:

.. code-block:: text

    path/to/webroot/ <- your web server directory (sometimes named htdocs or public)
        Symfony/ <- the new directory
            app/
                cache/
                config/
                logs/
            src/
                ...
            vendor/
                ...
            web/
                app.php
                ...
Вариант 2) Загружаем архив
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Или вы можете загузить архив с Standard Edition. Здесь вам тоже предстоит сделать выбор:


* Загрузить либо ``.tgz`` либо ``.zip`` архив - они идентичны, просто вопрос предпочтений.

* Загрузить дистрибутив, включающий библиотеки производителей ли же не включающий
  (with/without vendors).Если вы планируете активно использовать библиотеки или пакеты (bundles)от 
  сторонних производителей, и управлять ими с помощью  Composer, тогда вам наверное лучше загружать
  "without vendors" - не включая библиотеки производителей.

Загрузите один из архивов в root-директорию вашего локального web-сервера
и распакуйте его. В командной строке UNIX это можно выполнить при помощи
одной из этих команд (заменяя ``###`` фактическим именем файла):

.. code-block:: bash

    # for .tgz file
    tar zxvf Symfony_Standard_Vendors_2.0.###.tgz

    # for a .zip file
    unzip Symfony_Standard_Vendors_2.0.###.zip
    
    
Если вы загружаете, не включая библиотеки производителей ("without vendors"), 
то вам стоит прочитать следующий раздел.
.. note::

    Вы легко можете переопределить структуру директорий по умолчанию. Подробнее в
    :doc:`/cookbook/configuration/override_dir_structure`.

Все public файлы и фронт-контроллер, который обрабатывает входящие запросы
в приложении Symfony2 находятся в директории ``Symfony/web/``. Так что, предполагая что вы 
распаковали ваш архив в ваш web-сервер  или в корневую директорию виртуального хоста (virtual 
host's document root), URL вашего приложения будут начинаться с ``http://localhost/Symfony/web/``.

.. note::

    Последующие примеры предполагают, что вы не изменяли корневые настройки документа, и все URL
    начинаются с ``http://localhost/Symfony/web/``

.. _installation-updating-vendors:


Обновление Вендоров
~~~~~~~~~~~~~~~~

Далее, если вы загрузили архив "без вендоров" (without vendors), необходимо их
установить, выполнив следующую команду:

.. code-block:: bash

    php bin/vendors install

Эта команда загрузит все необходимые библиотеки, включая собственно Symfony,
в директорию ``vendor/``. Более подробную информацию о том, как управлять сторонними
библиотеками в Symfony2 вы можете получить в разделе ":ref:`cookbook-managing-vendor-libraries`".

Конфигурация и настройка
~~~~~~~~~~~~~~~~~~~~~~~

На текущий момент все необходимые сторонние библиотеки теперь располагаются
в директории ``vendor/``. Также в директории ``app/`` расположены настройки по-умолчанию,
а в директории ``src/`` пример кода.

Symfony2 поставляется с визуальным тестером конфигурации веб-сервера, для того чтобы
помочь вам определить, подходит ли конфигурация вашего сервера и PHP для Symfony.
Используйте следующий URL для проверки конфигурации:

.. code-block:: text

    http://localhost/Symfony/web/config.php

Если проверка показывает какие-либо несоответствия - исправьте их, прежде чем двигаться далее.

.. sidebar:: Настройка прав доступа

    Одно из типовых замечаний заключается в том, что директории ``app/cache``
    и ``app/logs`` должны иметь права на запись как для веб-сервера, так и
    для пользователя, от имени которого выполняются команды из командной
    строки. В UNIX-системах, если пользователь, из-под которого запускается
    веб-сервер отличается от пользователя командной строки, вы можете выполнить
    следующие команды, для того чтобы быть уверенными, что права доступа
    настроены верно. Заменяйте ``www-data`` на пользователя веб-сервера и
    ``yourname`` на вашего пользователя командной строки:

    **1. Использование ACL в системах, которые поддерживают chmod +a**

    Многие системы позволяют использовать команду ``chmod +a``. Попробуйте
    выполнить её, и если вы получите сообщение об ошибке - пробуйте следующий
    метод:

    .. code-block:: bash

        rm -rf app/cache/*
        rm -rf app/logs/*

        sudo chmod +a "www-data allow delete,write,append,file_inherit,directory_inherit" app/cache app/logs
        sudo chmod +a "yourname allow delete,write,append,file_inherit,directory_inherit" app/cache app/logs

    **2. Использование Acl на системах, которые не поддерживают chmod +a**

    Некоторые системы не поддерживают ``chmod +a``, но поддерживают другую
    утилиту, ``setfacl``. Возможно, вам потребуется `включить поддержку ACL`_
    на вашем разделе и установить ``setfacl`` перед тем как использовать
    (это может потребоваться, например, если вы используете Ubuntu):

    .. code-block:: bash

        sudo setfacl -R -m u:www-data:rwx -m u:yourname:rwx app/cache app/logs
        sudo setfacl -dR -m u:www-data:rwx -m u:yourname:rwx app/cache app/logs

    **3. Без использования ACL**

    Если у вас нет прав на изменение ACL для директорий, вам потребуется
    изменить umask таким образом, чтобы директории cache и log были доступны
    на запись группе или же всем (world-writable) в зависимости от того находятся
    ли пользователи веб-сервера и командной строки в одной группе или нет.
    Для этого нужно вставить следующую строчку в начало файлов ``app/console``,
    ``web/app.php`` и ``web/app_dev.php``:

    .. code-block:: php

        umask(0002); // Разрешает использовать права 0775

        // или

        umask(0000); // Разрешает использовать права 0777

    Имейте в виду, что использование ACL предпочтительнее, когда вы
    имеете доступ к ним на сервере, потому что смена umask не является
    thread-safe.

Когда все необходимые приготовления выполнены, кликните на ссылку "Go to the Welcome page"
и перейдите на вашу первую "настоящую" страницу Symfony2:

.. code-block:: text

    http://localhost/Symfony/web/app_dev.php/

Symfony2 поздоровкается и поздравит вас с проделанной тяжелой работой!!

.. image:: /images/quick_tour/welcome.jpg

Начало разработки
---------------------

Теперь, когда мы имеем настроенное Symfony2 приложение, вы можете
начать разработку. Ваш дистрибутив может содержать примеры кода -
прочтите файл ``README.rst`` из дистрибутива (это обычный текстовый файл)
для того чтобы ознакомиться с тем, какие примеры включены в данный дистрибутив
и как их можно будет удалить позднее.

Если вы новичок в Symfony, ознакомьтесь с руководством ":doc:`page_creation`",
где вы узнаете, как создавать страницы, изменять настройки и вообще делать всё
необходимое для создания нового приложения.

Использование системы контроля версий
--------------------

Если вы используете систему контроля версий типа ``Git`` или ``Subversion``,
вы можете настроить вашу систему и начать коммитить ваш проект как вы это
делаете обычно. Symfony Standard - это точка отсчёта для вашего нового проекта.

Более подробные инструкции о том, как лучше всего настроить проект для
хранения в git, загляните сюда: :doc:`/cookbook/workflow/new_project_git`.

Игнорируем директорию ``vendor/``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Если вы загрузили архив *без вендоров* вы можете спокойно игнорить директорию
``vendor/`` целиком и не коммитить её содержимое в систему контроля версий.
В ``Git`` этого можно добиться, создав файл ``.gitignore`` и добавив в него
следующую строку:

.. code-block:: text

    vendor/

После этого директория vendor не будет участвовать в коммитах. Это здорово
(правда-правда!), потому что когда кто-то еще клонирует или выгрузит ваш проект
он сможет запросто выполнить скрипт ``php bin/vendors install`` и загрузить
все необходимые библиотеки.

.. _`включить поддержку ACL`: https://help.ubuntu.com/community/FilePermissions#ACLs
.. _`http://symfony.com/download`: http://symfony.com/download
.. _`Git`: http://git-scm.com/
.. _`GitHub Bootcamp`: http://help.github.com/set-up-git-redirect
