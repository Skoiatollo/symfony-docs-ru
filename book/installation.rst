.. index::
   single: Установка

Установка и настройка Symfony2
==================================

Цель этой главы - помочь вам настроить и запустить рабочее приложение, созданное
при помощи Symfony. К счастью, Symfony предлагает "дистрибутивы", которые
представляют собой базовые "пусковые" проекты, которые вы можете загрузить и незамедлительно
начать разработку.

.. tip::

    Если вы ищите руководство по созданию нового проекта и размещению
    его в системе контроля версий, перейдите к секции `Использование системы контроля версий`_.

Загрузка дистрибутива Symfony2
-----------------------------------

.. tip::

    Прежде всего, удостоверьтесь, что у вас установлен и настроен Web-сервер
    (например, Apache) и интерпретатор PHP. Более подробную
    информацию о системных требованиях Symfony2 вы можете найти в разделе
    :doc:`Системные требования</reference/requirements>`.

Дистрибутивы Symfony2 представляют собой полнофункциональные приложения,
включающие ядро Symfony2, набор полезных пакетов (Bundles), разумную структуру
директорий и конфигурацию по умолчанию. Когда вы загружаете дистрибутив Symfony2,
вы фактически загружаете функциональный скелет приложения, который тут же
можно начать использовать как базу для вашего собственного приложения.

Начнём со страницы загрузки Symfony2 `http://symfony.com/download`_.
На этой странице находится дистрибутив *Symfony Standard Edition*,
который  является основным. Теперь вам нужно выбрать между 2 решениями:

Вариант 1) Composer
~~~~~~~~~~~~~~~~~~

`Composer`_ является бибилиотекой по управлению зависимостями для PHP, и ее можно использовать 
для загрузки Symfony2 Standard Edition.

Начните с `downloading Composer`_ на ваш локальный компьютер. Если у вас установлен curl,
то это довольно просто:

.. code-block:: bash

    curl -s https://getcomposer.org/installer | php

.. note::

    Если ваш компьютер не готов к использованию Composer, то при запуске этой команды 
    появятся рекомендации по сообразной настройке  Composer.
    

Composer - это выполняемый файл PHAR, который вы можете использовать для загрузки 
стандартного дистрибутива (Standard Distribution):

.. code-block:: bash

    $ php composer.phar create-project symfony/framework-standard-edition /path/to/webroot/Symfony 2.3.*

.. tip::

    Чтобы файлы от поставщика (vendor files) грузились быстрее, добавьте опцию ``--prefer-dist`` 
    в конец любой команды Composer.

За несколько минут, необходимых для выполнения этой команды,  Composer загрузит Стандартный Дистрибутив 
(Standard Distribution) вместе со всеми необходимыми специализированными библиотеками производителя 
(vendor libraries). По завершению у вас будет директория, выглядящая примерно так:

.. code-block:: text

    path/to/webroot/ <- your web server directory (sometimes named htdocs or public)
        Symfony/ <- the new directory
            app/
                cache/
                config/
                logs/
            src/
                ...
            vendor/
                ...
            web/
                app.php
                ...
Вариант 2) Загружаем архив
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Или вы можете загрузить архив с Standard Edition. Здесь вам тоже предстоит сделать выбор:


* Загрузить либо ``.tgz`` либо ``.zip`` архив - они идентичны, просто вопрос предпочтений.

* Загрузить дистрибутив, включающий библиотеки производителей или же не включающий
  (with/without vendors).Если вы планируете активно использовать библиотеки или пакеты (bundles) от 
  сторонних производителей, и управлять ими с помощью  Composer, тогда вам наверное лучше загружать
  "without vendors" - не включая библиотеки производителей.

Загрузите один из архивов в root-директорию вашего локального web-сервера
и распакуйте его. В командной строке UNIX это можно выполнить при помощи
одной из этих команд (заменяя ``###`` фактическим именем файла):

.. code-block:: bash

    # for .tgz file
    tar zxvf Symfony_Standard_Vendors_2.0.###.tgz

    # for a .zip file
    unzip Symfony_Standard_Vendors_2.0.###.zip
    
    
Если вы загружаете, не включая библиотеки производителей ("without vendors"), 
то вам стоит прочитать следующий раздел.

.. note::

    Вы легко можете переопределить структуру директорий по умолчанию. Подробнее в
    :doc:`/cookbook/configuration/override_dir_structure`.

Все public файлы и фронт-контроллер, который обрабатывает входящие запросы
в приложении Symfony2 находятся в директории ``Symfony/web/``. Так что, предполагая что вы 
распаковали ваш архив в ваш web-сервер  или в корневую директорию виртуального хоста (virtual 
host's document root), URL вашего приложения будут начинаться с ``http://localhost/Symfony/web/``.

.. note::

    Последующие примеры предполагают, что вы не изменяли корневые настройки документа, и все URL
    начинаются с ``http://localhost/Symfony/web/``

.. _installation-updating-vendors:


Обновление Вендоров
~~~~~~~~~~~~~~~~

На данном этапе, вы загрузили полнофункциональный проект Symfony, в котором вы 
начнете разрабатывать свое приложение. Проект Symfony зависит от определенного количества 
внешних библиотек. Они загружаются в директорию `vendor/`  вашего проекта с помощью 
библиотеки `Composer`_.

В зависимости от того, как вы загрузили Symfony, вам нужно или не нужно обновить специализированные 
библиотеки производителя (vendors). Но в любом случае, безопаснее будет обновить ваши специализированные 
библиотеки производителя (vendors), и вы, таким образом, сможете быть уверены в том, что все они у вас в 
наличии.

Шаг 1: Загрузить `Composer`_ (Новая замечательная система распределения PHP (РНР packaging))

.. code-block:: bash

    curl -s http://getcomposer.org/installer | php

Убедитесь в том, что вы загрузили ``composer.phar`` в ту же папку, где находится файл 
``composer.json`` (это по умолчанию ваша корневая директория проекта Symfony).

Шаг 2: Устанавливаем специализированные библиотеки производителя (vendors)

.. code-block:: bash

    $ php composer.phar install

Эта команда загружает все необходимые библиотеки производителя (vendor libraries) - включая саму 
Symfony  - в директоию ``vendor/``.

.. note::

    Если у вас не установлен ``curl``, вы можете просто загрузить файл ``installer`` вручную 
    в http://getcomposer.org/installer. Поместите этот файл в ваш проект и затем выполните 
    следующую команду:

    .. code-block:: bash

        php installer
        php composer.phar install

.. tip::

    При запуске ``php composer.phar install`` или  ``php composer.phar update``,
    Composer выполнит команды после установки/обновления для очистки кэша и установки 
    макетов (assets). По умолчанию, макеты затем копируются в вашу директорию ``web``.

    Вместо копирования макетов Symfony, вы можете создать символьные ссылки (symlinks) 
    если ваша операционная система их поддерживает. Для создания символьных ссылок symlinks, 
    добавьте следующие строки в узел (node) ``extra`` вашего файла composer.json с ключом (key)
    ``symfony-assets-install`` и значением ``symlink``:

    .. code-block:: json

        "extra": {
            "symfony-app-dir": "app",
            "symfony-web-dir": "web",
            "symfony-assets-install": "symlink"
        }

    При передаче занчения ``relative`` вместо ``symlink`` в symfony-assets-install,
    команда генерирует относительные символьные ссылки (relative symlinks).
    
Конфигурация и настройки
~~~~~~~~~~~~~~~~~~~~~~~

На текущий момент все необходимые сторонние библиотеки теперь располагаются
в директории ``vendor/``. Также в директории ``app/`` расположены настройки по умолчанию,
а в директории ``src/`` - пример кода.

Symfony2 поставляется с визуальным тестером конфигурации веб-сервера для того, чтобы
помочь вам определить, подходит ли конфигурация вашего сервера и PHP для Symfony.
Используйте следующий URL для проверки конфигурации:

.. code-block:: text

    http://localhost/config.php

Если проверка показывает какие-либо несоответствия - исправьте их, прежде чем двигаться далее.

.. sidebar:: Настройка прав доступа

    Одно из типовых замечаний заключается в том, что как  веб-сервер, так и
    для пользователь, от имени которого выполняются команды из командной
    строки, должны иметь права на запись в директории ``app/cache``
    и ``app/logs``. В UNIX-системах, если пользователь, из-под которого запускается
    веб-сервер отличается от пользователя командной строки, вы можете выполнить в своем проекте
    следующие команды единственный раз для того, чтобы быть уверенными, что права доступа
    настроены верно. 

    **1. Использование ACL в системах, которые поддерживают chmod +a**

    Многие системы позволяют использовать команду ``chmod +a``. Попробуйте
    выполнить её, и если вы получите сообщение об ошибке - пробуйте следующий
    метод. Данный вариант использует команду для определения вашего пользователя
    web-сервера, и присвоить ему имя ``APACHEUSER``:

    .. code-block:: bash

        $ rm -rf app/cache/*
        $ rm -rf app/logs/*

        $ APACHEUSER=`ps aux | grep -E '[a]pache|[h]ttpd' | grep -v root | head -1 | cut -d\  -f1`
        $ sudo chmod +a "$APACHEUSER allow delete,write,append,file_inherit,directory_inherit" app/cache app/logs
        $ sudo chmod +a "`whoami` allow delete,write,append,file_inherit,directory_inherit" app/cache app/logs



    **2. Использование ACL на системах, которые не поддерживают chmod +a**

    Некоторые системы не поддерживают ``chmod +a``, но поддерживают другую
    утилиту, ``setfacl``. Возможно, вам потребуется `включить поддержку ACL`_
    на вашем разделе и установить ``setfacl`` перед тем, как использовать его
    (это может потребоваться, например, если вы используете Ubuntu). Данный вариант 
    использует команду для определения вашего пользователя web-сервера, и присвоить 
    ему имя ``APACHEUSER``:

    .. code-block:: bash

	$ APACHEUSER=`ps aux | grep -E '[a]pache|[h]ttpd' | grep -v root | head -1 | cut -d\  -f1`
	$ sudo setfacl -R -m u:$APACHEUSER:rwX -m u:`whoami`:rwX app/cache app/logs
	$ sudo setfacl -dR -m u:$APACHEUSER:rwX -m u:`whoami`:rwX app/cache app/logs
		

    **3. Без использования ACL**

    Если у вас нет прав на изменение ACL для директорий, вам потребуется
    изменить umask таким образом, чтобы директории cache и log были доступны
    на запись группе или же всем (world-writable) в зависимости от того, находятся
    ли пользователи веб-сервера и командной строки в одной группе, или нет.
    Для этого нужно вставить следующую строчку в начало файлов ``app/console``,
    ``web/app.php`` и ``web/app_dev.php``::

         umask(0002); // This will let the permissions be 0775

        // or

        umask(0000); // This will let the permissions be 0777

  
    Имейте в виду, что использование ACL предпочтительнее, когда вы
    имеете доступ к ним на сервере, потому что смена umask не является
    thread-safe.

Когда все необходимые приготовления выполнены, кликните на ссылку "Go to the Welcome page"
и перейдите на вашу первую "настоящую" страницу Symfony2:

.. code-block:: text

    http://localhost/app_dev.php/
    
Symfony2 поздоровается и поздравит вас с проделанной тяжелой работой!!

.. image:: /images/quick_tour/welcome.png

.. tip::

    Для того, чтобы urlы были красивыми и короткими, следует сделать 
    своим корневым каталогом документов для вашего веб-сервера или  виртуального хоста 
    директорию ``Symfony/web/``. Хотя это не является необходимым требованием 
    для начала разработки, это действие рекомендуется к выполнению на стадии, когда 
    ваше приложение будет запускаться в производство, т.к. тогда все системные и конфигурационные файлы 
    станут для клиентов недоступными. Чтобы узнать больше о конфигурации вашего 
    веб-сервера, прочтите :doc:`/cookbook/configuration/web_server_configuration`
    или просмотрите  официальную документацию по вашему веб-серверу:
    `Apache`_ | `Nginx`_ .

Начало разработки
---------------------

Теперь, когда мы имеем настроенное Symfony2 приложение, вы можете
начать разработку. Ваш дистрибутив может содержать примеры кода -
прочтите файл ``README.rst`` из дистрибутива (это обычный текстовый файл)
для того чтобы ознакомиться с тем, какие примеры включены в данный дистрибутив.

Если вы новичок в Symfony, ознакомьтесь с руководством ":doc:`page_creation`",
где вы узнаете, как создавать страницы, изменять настройки и вообще делать всё
необходимое для создания нового приложения.

Обязательно загляните в :doc:`Cookbook </cookbook/index>`, где содержится огромное 
множество статей по решению специфических проблем с помощью Symfony.

.. note::

    Если вы хотите удалить примеры кода из своего дистрибутива, ознакомьтесь сначала с этой статьей: 
    ":doc:`/cookbook/bundles/remove`"


Использование системы контроля версий
--------------------

Если вы используете систему контроля версий типа ``Git`` или ``Subversion``,
вы можете настроить вашу систему и начать коммитить ваш проект как вы это
делаете обычно. Symfony Standard Edition- это точка отсчёта для вашего нового проекта.

Более подробные инструкции о том, как лучше всего настроить проект для
хранения в Git, загляните сюда: :doc:`/cookbook/workflow/new_project_git`.

Игнорируем директорию ``vendor/``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Если вы загрузили архив не включая библиотеки производителей (*without vendors*), 
то вы можете спокойно игнорировать директорию ``vendor/`` целиком и не коммитить 
её содержимое в систему контроля версий.
В ``Git`` этого можно добиться, создав файл ``.gitignore`` и добавив в него
следующую строку:

.. code-block:: text

    /vendor/

После этого директория vendor не будет участвовать в коммитах. Это здорово
(правда-правда!), потому что когда кто-то еще клонирует или выгрузит ваш проект
он сможет запросто выполнить скрипт ``php composer.phar install`` и загрузить
все необходимые зависимости проекта.

.. _`включить поддержку ACL`: https://help.ubuntu.com/community/FilePermissionsACLs
.. _`http://symfony.com/download`: http://symfony.com/download
.. _`Git`: http://git-scm.com/
.. _`GitHub Bootcamp`: http://help.github.com/set-up-git-redirect
.. _`Composer`: http://getcomposer.org/
.. _`downloading Composer`: http://getcomposer.org/download/
.. _`Apache`: http://httpd.apache.org/docs/current/mod/core.html#documentroot
.. _`Nginx`: http://wiki.nginx.org/Symfony
.. _`Symfony Installation Page`:    http://symfony.com/download

